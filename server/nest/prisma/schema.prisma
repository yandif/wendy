datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @default(now()) @map("updated_at")
  deletedAt    DateTime?     @map("deleted_at")
  username     String
  password     String
  mobile       String?
  email        String?
  status       Int?          @default(1)
  platform     Int?          @default(0)
  isSuper      Int           @default(0) @map("is_super")
  role         Role[]
  loginlog     Loginlog[]
  AccountToken AccountToken?
}

model AccountToken {
  id         Int      @id @default(autoincrement())
  account    Account  @relation(fields: [accountId], references: [id])
  accountId  Int      @unique @map("account_id")
  token      String
  username   String
  mobile     String?
  email      String?
  platform   Int
  isSuper    Int
  expireTime DateTime

  @@map("account_token")
}

model Role {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  name        String
  description String?
  status      Int?      @default(1)
  isDefault   Int?      @default(0) @map("is_default")
  account     Account[]
  access      Access[]
}

model Access {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  moduleName  String?   @map("module_name")
  type        Int?
  actionName  String?   @map("action_name")
  apiName     String?   @map("api_name")
  icon        String?
  url         String?
  method      String?
  sort        Int       @default(1)
  status      Int?      @default(1)
  description String?
  role        Role[]
  parent      Access    @relation("AccessToAccess", fields: [parentId], references: [id])
  parentId    Int       @map("parent_id")
  chrildren   Access[]  @relation("AccessToAccess")
}

model Loginlog {
  id        Int      @id @default(autoincrement())
  ip        String?
  address   String?
  date      DateTime @default(now())
  account   Account  @relation(fields: [accountId], references: [id])
  accountId Int      @map("account_id")
}

model QueryCache {
  id         Int     @id @default(autoincrement())
  identifier String?
  time       Int
  duration   Int
  query      String
  result     String

  @@map("query_cache")
}
